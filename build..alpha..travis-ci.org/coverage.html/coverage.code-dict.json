{"/home/travis/build/npmtest/node-npmtest-airbrake/test.js":"/* istanbul instrument in package npmtest_airbrake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-airbrake/lib.npmtest_airbrake.js":"/* istanbul instrument in package npmtest_airbrake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_airbrake = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_airbrake = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-airbrake/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-airbrake && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_airbrake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_airbrake\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_airbrake.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_airbrake.rollup.js'] =\n            local.assetsDict['/assets.npmtest_airbrake.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_airbrake.__dirname + '/lib.npmtest_airbrake.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-airbrake/node_modules/airbrake/index.js":"module.exports = require('./lib/airbrake');\n","/home/travis/build/npmtest/node-npmtest-airbrake/node_modules/airbrake/lib/airbrake.js":"var HTTP_STATUS_CODES = require('http').STATUS_CODES;\n\nvar fs = require('fs');\nvar os = require('os');\nvar EventEmitter = require('events').EventEmitter;\nvar request = require('request');\nvar stackTrace = require('stack-trace');\nvar merge = require('lodash.merge');\nvar execSync = require('child_process').execSync;\nvar url = require('url');\n\nvar truncator = require('../lib/truncator');\n\nvar pkg = require('../package.json');\n\nfunction Airbrake() {\n  this.key = null;\n  this.projectId = null;\n\n  this.host = 'https://' + os.hostname();\n  this.env = process.env.NODE_ENV || 'development';\n  this.whiteListKeys = [];\n  this.blackListKeys = [];\n  this.filters = [];\n  this.projectRoot = process.cwd();\n  this.appVersion = null;\n  this.timeout = 30 * 1000;\n  this.consoleLogError = false;\n\n  this.proxy = null;\n  this.protocol = 'https';\n  this.serviceHost = process.env.AIRBRAKE_SERVER || 'api.airbrake.io';\n  this.requestOptions = {};\n  this.ignoredExceptions = [];\n  this.exclude = [\n    'type',\n    'message',\n    'arguments',\n    'stack',\n    'url',\n    'session',\n    'params',\n    'component',\n    'action',\n    'ua'\n  ];\n}\n\nmerge(Airbrake.prototype, EventEmitter.prototype);\n\nAirbrake.PACKAGE = (function() {\n  var json = fs.readFileSync(__dirname + '/../package.json', 'utf8');\n  return JSON.parse(json);\n}());\n\nAirbrake.createClient = function(projectId, key, env) {\n  var instance = new this();\n  instance.key = key;\n  instance.env = env || instance.env;\n  instance.projectId = projectId || instance.projectId;\n\n  if (!instance.key || !instance.projectId) {\n    throw new Error('Key or project ID missing during Airbrake.createClient()');\n  }\n\n  return instance;\n};\n\nAirbrake.prototype.expressHandler = function(disableUncaughtException) {\n  var self = this;\n\n  if (!disableUncaughtException) {\n    process.on('uncaughtException', function(err) {\n      self._onError(err, true);\n    });\n  }\n\n  return function errorHandler(err, req, res, next) {\n    var error = err;\n    var requestObj = req;\n    var responseObj = res;\n\n    if (responseObj.statusCode < 400) responseObj.statusCode = 500;\n\n    error.url = requestObj.url;\n    error.action = requestObj.url;\n    error.component = 'express';\n    error.httpMethod = requestObj.method;\n    error.params = requestObj.body;\n    error.session = requestObj.session;\n    error.ua = requestObj.get('User-Agent');\n\n    self._onError(err, false);\n    next(err);\n  };\n};\n\nAirbrake.prototype.hapiHandler = function() {\n  var self = this;\n  var plugin = {\n    register: function(server, options, next) {\n      server.on('request-error', function(req, err) {\n        var error = err;\n\n        error.url =\n          req.connection.info.protocol + '://' +\n          req.info.host +\n          req.url.path;\n\n        error.action = req.url.path;\n        error.component = 'hapi';\n        error.httpMethod = req.method;\n        error.params = request.params;\n        error.ua = req.headers['user-agent'];\n\n        self._onError(err, false);\n      });\n\n      next();\n    }\n  };\n\n  plugin.register.attributes = { pkg: pkg };\n  return plugin;\n};\n\nAirbrake.prototype._onError = function(err, die) {\n  var self = this;\n  var error = (err instanceof Error) ? err : new Error(err);\n  self.log('Airbrake: Uncaught exception, sending notification for:');\n  self.log(error.stack || error);\n\n  self.notify(error, function(notifyErr, notifyUrl, devMode) {\n    if (notifyErr) {\n      self.log('Airbrake: Could not notify service.');\n      self.log(notifyErr.stack);\n    } else if (devMode) {\n      self.log('Airbrake: Dev mode, did not send.');\n    } else {\n      self.log('Airbrake: Notified service: ' + notifyUrl);\n    }\n\n    if (die) {\n      process.exit(1);\n    }\n  });\n};\n\nAirbrake.prototype.handleExceptions = function(die) {\n  var self = this;\n  var shouldDie = (typeof die === 'undefined') ? true : die;\n  process.on('uncaughtException', function(err) {\n    self._onError(err, shouldDie);\n  });\n};\n\nAirbrake.prototype.log = function(str) {\n  if (this.consoleLogError) {\n    console.error(str);\n  }\n};\n\nAirbrake.prototype._sendRequest = function(body, cb) {\n  var callback = this._callback(cb);\n\n  var options = merge({\n    method: 'POST',\n    url: this.url('/api/v3/projects/' + this.projectId + '/notices?key=' + this.key),\n    body: body,\n    timeout: this.timeout,\n    headers: {\n      'Content-Length': body.length,\n      'Content-Type': 'application/json',\n      Accept: 'application/json'\n    }\n  }, this.requestOptions);\n\n  request(options, function(requestErr, res, responseBody) {\n    if (requestErr) {\n      return callback(requestErr);\n    }\n\n    if (typeof responseBody === 'undefined') {\n      return callback(new Error('invalid body'));\n    }\n\n    if (res.statusCode >= 300) {\n      var status = HTTP_STATUS_CODES[res.statusCode];\n\n      var explanation = responseBody.match(/<error>([^<]+)/i);\n      explanation = (explanation)\n        ? ': ' + explanation[1]\n        : ': ' + responseBody;\n\n      return callback(new Error(\n        'Notification failed: ' + res.statusCode + ' ' + status + explanation\n      ));\n    }\n\n    return callback(null, JSON.parse(responseBody).url);\n  });\n};\n\nAirbrake.prototype.addFilter = function(filter) {\n  this.filters.push(filter);\n};\n\nAirbrake.prototype.notify = function(err, cb) {\n  var callback = this._callback(cb);\n  var exit = false;\n\n  this.ignoredExceptions.forEach(function(exception) {\n    if (err instanceof exception) {\n      exit = true;\n    }\n  });\n\n  var notice = this.notifyJSON(err);\n\n  this.filters.forEach(function(filter) {\n    if (notice) {\n      notice = filter(notice);\n    }\n  });\n\n  if (exit || !notice) {\n    return callback(null, null, false);\n  }\n\n  return this._sendRequest(truncator.jsonifyNotice(notice), callback);\n};\n\nAirbrake.prototype._callback = function(cb) {\n  var self = this;\n  return function(err) {\n    if (cb) {\n      cb.apply(self, arguments);\n      return;\n    }\n\n    if (err) {\n      self.emit('error', err);\n    }\n  };\n};\n\nAirbrake.prototype.url = function(path) {\n  return this.protocol + '://' + this.serviceHost + path;\n};\n\nAirbrake.prototype.environmentJSON = function(err) {\n  var cgiData = {};\n  var self = this;\n\n  if (this.whiteListKeys.length > 0) {\n    Object.keys(process.env).forEach(function(key) {\n      if (self.whiteListKeys.indexOf(key) > -1) {\n        cgiData[key] = process.env[key];\n      } else {\n        cgiData[key] = '[FILTERED]';\n      }\n    });\n  } else if (this.blackListKeys.length > 0) {\n    Object.keys(process.env).forEach(function(key) {\n      if (self.blackListKeys.indexOf(key) > -1) {\n        cgiData[key] = '[FILTERED]';\n      } else {\n        cgiData[key] = process.env[key];\n      }\n    });\n  }\n\n  if (err.httpMethod) {\n    cgiData.httpMethod = err.httpMethod;\n  }\n\n  Object.keys(err).forEach(function(key) {\n    if (self.exclude.indexOf(key) >= 0) {\n      return;\n    }\n\n    cgiData['err.' + key] = err[key];\n  });\n\n  cgiData['process.pid'] = process.pid;\n\n  if (os.platform() !== 'win32') {\n    // this two properties are *NIX only\n    cgiData['process.uid'] = process.getuid();\n    cgiData['process.gid'] = process.getgid();\n  }\n\n  cgiData['process.cwd'] = process.cwd();\n  cgiData['process.execPath'] = process.execPath;\n  cgiData['process.version'] = process.version;\n  cgiData['process.argv'] = process.argv;\n  cgiData['process.memoryUsage'] = process.memoryUsage();\n  cgiData['os.loadavg'] = os.loadavg();\n  cgiData['os.uptime'] = os.uptime();\n\n  return cgiData;\n};\n\nAirbrake.prototype.contextJSON = function(err) {\n  var context = {};\n  context.notifier = {\n    name: 'node-airbrake',\n    version: Airbrake.PACKAGE.version,\n    url: Airbrake.PACKAGE.homepage\n  };\n\n  context.environment = this.env;\n  context.rootDirectory = this.projectRoot;\n  context.os = os.type();\n  context.hostname = os.hostname();\n  context.url = url.resolve(this.host, err.url || '');\n  context.userAgent = err.ua;\n  context.component = err.component;\n  context.action = err.action;\n\n  return context;\n};\n\nAirbrake.prototype.notifyJSON = function(err) {\n  var trace = stackTrace.parse(err);\n  var self = this;\n\n  return {\n    errors: [\n      {\n        type: err.type || 'Error',\n        message: err.message,\n        backtrace: trace.map(function(callSite) {\n          return {\n            file: callSite.getFileName() || '',\n            line: callSite.getLineNumber(),\n            function: callSite.getFunctionName() || ''\n          };\n        })\n      }],\n    environment: self.environmentJSON(err),\n    context: self.contextJSON(err),\n    session: self.sessionVars(err),\n    params: self.paramsVars(err)\n  };\n};\n\nAirbrake.prototype.sessionVars = function(err) {\n  return (typeof err.session === 'object')\n    ? err.session\n    : {};\n};\n\nAirbrake.prototype.paramsVars = function(err) {\n  return (typeof err.params === 'object')\n    ? err.params\n    : {};\n};\n\nAirbrake.prototype.trackDeployment = function(params, cb) {\n  var callback = cb;\n  var deploymentParams = params || {};\n\n  if (typeof deploymentParams === 'function') {\n    callback = deploymentParams;\n    deploymentParams = {};\n  }\n\n  deploymentParams = merge({\n    key: this.key,\n    env: this.env,\n    user: process.env.USER,\n    rev: execSync('git rev-parse HEAD').toString().trim(),\n    repo: execSync('git config --get remote.origin.url').toString().trim()\n  }, deploymentParams);\n\n  var body = this.deploymentPostData(deploymentParams);\n\n  var options = merge({\n    method: 'POST',\n    url: this.url('/api/v4/projects/' + this.projectId + '/deploys?key=' + this.key),\n    body: body,\n    timeout: this.timeout,\n    headers: {\n      'Content-Length': body.length,\n      'Content-Type': 'application/json'\n    },\n    proxy: this.proxy\n  }, this.requestOptions);\n\n  var requestCallback = this._callback(callback);\n\n  request(options, function(err, res, responseBody) {\n    if (err) {\n      return requestCallback(err);\n    }\n\n    if (res.statusCode >= 300) {\n      var status = HTTP_STATUS_CODES[res.statusCode];\n      return requestCallback(new Error(\n        'Deployment failed: ' + res.statusCode + ' ' + status + ': ' + responseBody\n      ));\n    }\n\n    return requestCallback(null, deploymentParams);\n  });\n};\n\nAirbrake.prototype.deploymentPostData = function(params) {\n  return JSON.stringify({\n    version: 'v2.0',\n    environment: params.env,\n    username: params.user,\n    revision: params.rev,\n    repository: params.repo\n  });\n};\n\nmodule.exports = Airbrake;\n","/home/travis/build/npmtest/node-npmtest-airbrake/node_modules/airbrake/lib/truncator.js":"function Truncator(level) {\n  if (level === null || level === undefined || level < 0) {\n    level = 0;\n  }\n\n  this.maxStringLength = 1024;\n  this.maxObjectLength = 128;\n  this.maxArrayLength = 32;\n  this.maxDepth = 8;\n\n  this.keys = [];\n  this.seen = [];\n\n  for (var i = 0; i < level; i++) {\n    if (this.maxStringLength > 1) {\n      this.maxStringLength /= 2;\n    }\n    if (this.maxObjectLength > 1) {\n      this.maxObjectLength /= 2;\n    }\n    if (this.maxArrayLength > 1) {\n      this.maxArrayLength /= 2;\n    }\n    if (this.maxDepth > 1) {\n      this.maxDepth /= 2;\n    }\n  }\n}\n\nTruncator.prototype.truncate = function(value, key, depth) {\n  if (value === null || value === undefined) {\n    return value;\n  }\n  if (key === null || key === undefined) {\n    key = '';\n  }\n  if (depth === null || depth === undefined) {\n    depth = 0;\n  }\n\n  switch (typeof value) {\n    case 'boolean':\n    case 'number':\n    case 'function':\n      return value;\n    case 'string':\n      return this.truncateString(value);\n    case 'object':\n      break;\n    default:\n      return String(value);\n  }\n\n  if (value instanceof String) {\n    return this.truncateString(value.toString());\n  }\n\n  if (value instanceof Boolean ||\n      value instanceof Number ||\n      value instanceof Date ||\n      value instanceof RegExp) {\n    return value;\n  }\n\n  if (value instanceof Error) {\n    return value.toString();\n  }\n\n  if (this.seen.indexOf(value) >= 0) {\n    return '[Circular ' + this.getPath(value) + ']';\n  }\n\n  var type = this.objectType(value);\n\n  depth++;\n  if (depth > this.maxDepth) {\n    return '[Truncated ' + type + ']';\n  }\n\n  this.keys.push(key);\n  this.seen.push(value);\n\n  switch (type) {\n    case 'Array':\n      return this.truncateArray(value, depth);\n    case 'Object':\n      return this.truncateObject(value, depth);\n    default:\n      var saved = this.maxDepth;\n      this.maxDepth = 0;\n\n      var obj = this.truncateObject(value, depth);\n      obj.__type = type;\n\n      this.maxDepth = saved;\n\n      return obj;\n  }\n};\n\nTruncator.prototype.getPath = function(value) {\n  var index = this.seen.indexOf(value);\n  var path = [this.keys[index]];\n  for (var i = index; i >= 0; i--) {\n    var sub = this.seen[i];\n    if (sub && sub[path[0]] === value) {\n      value = sub;\n      path.unshift(this.keys[i]);\n    }\n  }\n\n  return '~' + path.join('.');\n};\n\nTruncator.prototype.truncateString = function(s) {\n  if (s.length > this.maxStringLength) {\n    return s.slice(0, this.maxStringLength) + '...';\n  }\n\n  return s;\n};\n\nTruncator.prototype.truncateArray = function(arr, depth) {\n  var length = 0;\n  var dst = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    var el = arr[i];\n\n    length++;\n    if (length >= this.maxArrayLength) {\n      break;\n    }\n\n    dst.push(this.truncate(el, i, depth));\n  }\n\n  return dst;\n};\n\n\nTruncator.prototype.truncateObject = function(obj, depth) {\n  var length = 0;\n  var dst = {};\n\n  for (var attr in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, attr)) {\n      var value = obj[attr];\n\n      if (value === undefined || typeof value === 'function') {\n        continue;\n      }\n\n      length++;\n      if (length >= this.maxObjectLength) {\n        break;\n      }\n\n      dst[attr] = this.truncate(value, attr, depth);\n    }\n  }\n\n  return dst;\n};\n\nTruncator.prototype.objectType = function(obj) {\n  var s = Object.prototype.toString.apply(obj);\n  return s.slice('[object '.length, -1);\n};\n\n// truncateObj truncates each key in the object separately, which is\n// useful for handling circular references.\nfunction truncateObj(obj, level) {\n  var dst = {};\n  for (var attr in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, attr)) {\n      dst[attr] = module.exports.truncate(obj[attr], level);\n    }\n  }\n\n  return dst;\n}\n\n\nmodule.exports.truncate = function truncate(value, level) {\n  var t = new Truncator(level);\n  return t.truncate(value);\n};\n\n// jsonifyNotice serializes notice to JSON and truncates params,\n// environment and session keys.\nmodule.exports.jsonifyNotice = function jsonifyNotice(notice, maxLength) {\n  if (maxLength === null || maxLength === undefined) {\n    maxLength = 64000;\n  }\n\n  var s = '';\n  for (var level = 0; level < 8; level++) {\n    notice.context = truncateObj(notice.context, level);\n    notice.params = truncateObj(notice.params, level);\n    notice.environment = truncateObj(notice.environment, level);\n    notice.session = truncateObj(notice.session, level);\n\n    s = JSON.stringify(notice);\n    if (s.length < maxLength) {\n      return s;\n    }\n  }\n\n  var err = new Error(\n    'node-airbrake: cannot jsonify notice (length=' + s.length + ' maxLength=' +\n      maxLength + ')'\n  );\n  err.params = {\n    json: s.slice(0, Math.floor(maxLength / 2)) + '...'\n  };\n  throw err;\n};\n","/home/travis/build/npmtest/node-npmtest-airbrake/node_modules/airbrake/.eslintrc.js":"module.exports = {\n  extends: \"airbnb-base/legacy\",\n  rules: {\n    \"no-console\": 0,\n    \"func-names\": 0,\n    \"vars-on-top\": 0,\n    \"no-underscore-dangle\": [\"error\", {\n      allow: [\n        '_onError',\n        '_callback',\n        '_sendRequest',\n        '__type'\n      ]\n    }],\n    \"space-before-function-paren\": [\"error\", \"never\"],\n    quotes: 0,\n    \"no-unused-vars\": [\"error\", {\n      \"argsIgnorePattern\": \"^_\"\n    }],\n    \"no-restricted-syntax\": 0,\n    \"no-param-reassign\": 0\n  }\n};\n"}